name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DJANGO_SETTINGS_MODULE: messaging_app.settings
  MYSQL_DATABASE: messaging_app_test
  MYSQL_USER: django_user
  MYSQL_PASSWORD: django_password
  MYSQL_ROOT_PASSWORD: root_password

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: >
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    strategy:
      matrix:
        python-version: [3.10.x, 3.11.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev pkg-config
        
    - name: Install Python dependencies
      working-directory: ./messaging_app
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-django pytest-cov pytest-html flake8 coverage
        
    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 --silent; do
          echo "Waiting for MySQL..."
          sleep 2
        done
        echo "MySQL is ready!"
        
    - name: Set up test database
      working-directory: ./messaging_app
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_NAME: ${{ env.MYSQL_DATABASE }}
        MYSQL_USER: ${{ env.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
      run: |
        python manage.py migrate --run-syncdb
        
    - name: Run Django tests
      working-directory: ./messaging_app
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_NAME: ${{ env.MYSQL_DATABASE }}
        MYSQL_USER: ${{ env.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
      run: |
        python manage.py test --verbosity=2
        
    - name: Run pytest with coverage
      working-directory: ./messaging_app
      env:
        MYSQL_HOST: 127.0.0.1
        MYSQL_PORT: 3306
        MYSQL_NAME: ${{ env.MYSQL_DATABASE }}
        MYSQL_USER: ${{ env.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
      run: |
        pytest --junitxml=test-results.xml \
               --cov=. \
               --cov-report=xml \
               --cov-report=html \
               --cov-report=term-missing \
               --html=test-report.html \
               --self-contained-html \
               chats/tests.py || true
               
    - name: Run flake8 linting
      working-directory: ./messaging_app
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Generate coverage report
      working-directory: ./messaging_app
      run: |
        coverage xml
        coverage html
        coverage report
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          messaging_app/test-results.xml
          messaging_app/test-report.html
          
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          messaging_app/coverage.xml
          messaging_app/htmlcov/
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10.x'
      with:
        file: ./messaging_app/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      working-directory: ./messaging_app
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint bandit safety
        pip install -r requirements.txt
        
    - name: Run Black code formatter check
      working-directory: ./messaging_app
      run: |
        black --check --diff .
        
    - name: Run isort import sorting check
      working-directory: ./messaging_app
      run: |
        isort --check-only --diff .
        
    - name: Run pylint
      working-directory: ./messaging_app
      run: |
        pylint --load-plugins=pylint_django --django-settings-module=messaging_app.settings chats/ messaging_app/ || true
        
    - name: Run bandit security linter
      working-directory: ./messaging_app
      run: |
        bandit -r . -x tests/ || true
        
    - name: Run safety check for vulnerabilities
      working-directory: ./messaging_app
      run: |
        safety check || true
        
    - name: Fail build on critical linting errors
      working-directory: ./messaging_app
      run: |
        # This will fail the build if there are critical syntax errors
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --max-line-length=127
