#!/bin/bash

echo "=== Blue-Green Deployment Script ==="

# Deploy blue version first
echo "Deploying Blue version..."
kubectl apply -f blue_deployment.yaml

# Wait for blue deployment to be ready
echo "Waiting for Blue deployment to be ready..."
kubectl rollout status deployment/django-messaging-app-blue

# Apply the service (initially pointing to blue)
echo "Applying services..."
kubectl apply -f kubeservice.yaml

# Check blue deployment
echo "=== Blue Deployment Status ==="
kubectl get pods -l version=blue
kubectl logs -l version=blue --tail=10

# Deploy green version
echo "Deploying Green version..."
kubectl apply -f green_deployment.yaml

# Wait for green deployment to be ready
echo "Waiting for Green deployment to be ready..."
kubectl rollout status deployment/django-messaging-app-green

# Check green deployment
echo "=== Green Deployment Status ==="
kubectl get pods -l version=green
kubectl logs -l version=green --tail=10

# Test both versions
echo "=== Testing Blue Version ==="
kubectl port-forward service/django-messaging-service-blue 8001:8000 &
BLUE_PID=$!
sleep 5
curl -f http://localhost:8001/ || echo "Blue version test failed"
kill $BLUE_PID

echo "=== Testing Green Version ==="
kubectl port-forward service/django-messaging-service-green 8002:8000 &
GREEN_PID=$!
sleep 5
curl -f http://localhost:8002/ || echo "Green version test failed"
kill $GREEN_PID

# Switch traffic to green version
echo "Switching traffic to Green version..."
kubectl patch service django-messaging-service -p '{"spec":{"selector":{"version":"green"}}}'

echo "=== Current Service Status ==="
kubectl get services
kubectl describe service django-messaging-service

echo "=== Blue-Green Deployment Complete! ==="
echo "Traffic is now routed to the Green version."
echo "To rollback to Blue, run: kubectl patch service django-messaging-service -p '{\"spec\":{\"selector\":{\"version\":\"blue\"}}}'"